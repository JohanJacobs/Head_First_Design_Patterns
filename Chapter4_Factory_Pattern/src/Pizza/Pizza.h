#pragma once 
#include <iostream>
#include <vector>
#include <memory>
#include "PizzaIngredientFactory/Ingredients.h"
/*
    Simple Pizza interface.     
*/

class Pizza
{
public:    
    
    ~Pizza()
    {
        if (!m_Pepperoni)
           delete m_Pepperoni;
        if (!m_Cheese)
           delete m_Cheese;
        if (!m_Clams)
           delete m_Clams;
        if (!m_Dough)
           delete m_Dough;
        if (!m_Sauce)
           delete m_Sauce;
        for (auto* t : m_Toppings)
            delete t;
    }
    void operator=(const Pizza&) = delete; // disable Copy assignment operator

    virtual void Prepare() = 0; // this is generated by the PizzaIngredientFactory for each region

    virtual void Bake()
    {
        std::cout << "Bake " << m_Name << ". \n";
    }

    virtual void Cut()
    {
        std::cout << "Cut " << m_Name << ". \n";
    }

    virtual void Box()
    {
        std::cout << "Box " << m_Name << ". \n";
    }
    virtual std::string GetName()
    {
        return m_Name;
    }        
protected:
    Pizza(const std::string& name = "None") : m_Name{name} {      }
    std::string m_Name;    
    Dough* m_Dough{nullptr};
    Sauce* m_Sauce{ nullptr };
    std::vector<Veggies*> m_Toppings;
    Cheese* m_Cheese{ nullptr };
    Pepperoni* m_Pepperoni{ nullptr };
    Clams* m_Clams{ nullptr };
};